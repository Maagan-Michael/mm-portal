error_log /dev/stdout debug;
# access_log /dev/stdout;

events {
  worker_connections  4096;  ## Default: 1024
}

http {
  include /usr/local/openresty/nginx/conf/mime.types;
  server { 
    listen       80;
    location ^~/api/ {
        add_header Access-Control-Allow-Origin *;
        add_header 'Access-Control-Allow_Credentials' 'true';
        add_header 'Access-Control-Allow-Headers' 'Authorization,Accept,Origin,DNT,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range';
        add_header 'Access-Control-Allow-Methods' 'GET,POST,OPTIONS,PUT,DELETE,PATCH';
        if ($request_method = "OPTIONS") {
          add_header Access-Control-Allow-Origin *;
          add_header 'Access-Control-Allow_Credentials' 'true';
          add_header 'Access-Control-Allow-Headers' 'Authorization,Accept,Origin,DNT,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Content-Range,Range';
          add_header 'Access-Control-Allow-Methods' 'GET,POST,OPTIONS,PUT,DELETE,PATCH';
          add_header Content-Length 0;
          add_header Content-Type text/plain;
          return 204;
        }
        access_by_lua_block
        {
            local cjson = require "cjson"
            ngx.log(ngx.INFO, "Running lua block")
            local method = ngx.req.get_method()
            local json_body = nil
            ngx.log(ngx.INFO, "Reading body")
            ngx.req.read_body()
            if method == "GET" then
              json_body = {}
              for key, val in pairs(ngx.req.get_uri_args()) do
                json_body[key] = val
              end
              ngx.req.set_header("Content-Type", "application/json")
            else
              ngx.log(ngx.INFO, "Body was read")
              local req = ngx.req.get_body_data()
              if req then
                ngx.log(ngx.INFO, "Getting body data")
                local json_body = cjson.decode(req)
              end
            end
            local envelope = cjson.encode({
                headers = ngx.req.get_headers(),
                message = json_body 
                })
            ngx.log(ngx.INFO, envelope)
            ngx.req.set_body_data(envelope)
        }        
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_pass http://host.docker.internal:8080/;        
        proxy_method POST;  
        rewrite /api(.*) /function$1 break;
    }

    location ^~/app/ {
       proxy_set_header X-Real-IP $remote_addr;
       proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
       proxy_set_header X-NginX-Proxy true;
       proxy_buffer_size   128k;
       proxy_buffers   4 256k;
       proxy_busy_buffers_size   256k;
       proxy_pass 'http://app';
       rewrite /app(.*) $1 break;
       proxy_ssl_session_reuse off;
       proxy_set_header Host $http_host;
       proxy_cache_bypass $http_upgrade;
       proxy_redirect off;
    }

    location / {
      return 301 $scheme://$host/app/;
    }
  }
}